- kind: listener
  name: listener
  protocol: http
  port: '{{ .PORT }}'
  env:
    PORT:
      data: '{{ .PORT }}'
  ports:
    out:
      - name: router
        port: in
    error:
      - name: catch
        port: in

- kind: router
  name: router
  routes:
    - method: POST
      path: /v1/specs
      port: out[0]
    - method: GET
      path: /v1/specs
      port: out[1]
    - method: PATCH
      path: /v1/specs
      port: out[2]
    - method: DELETE
      path: /v1/specs
      port: out[3]

    - method: GET
      path: /v1/specs/:id
      port: out[4]
    - method: PATCH
      path: /v1/specs/:id
      port: out[5]
    - method: DELETE
      path: /v1/specs/:id
      port: out[6]

    - method: POST
      path: /v1/values
      port: out[7]
    - method: GET
      path: /v1/values
      port: out[8]
    - method: PATCH
      path: /v1/values
      port: out[9]
    - method: DELETE
      path: /v1/values
      port: out[10]

    - method: GET
      path: /v1/values/:id
      port: out[11]
    - method: PATCH
      path: /v1/values/:id
      port: out[12]
    - method: DELETE
      path: /v1/values/:id
      port: out[13]
  ports:
    out[0]:
      - name: specs_create
        port: in
    out[1]:
      - name: specs_read_or_watch
        port: in
    out[2]:
      - name: specs_update
        port: in
    out[3]:
      - name: specs_delete_with_query
        port: in

    out[4]:
      - name: specs_read_with_params
        port: in
    out[5]:
      - name: specs_update_with_params
        port: in
    out[6]:
      - name: specs_delete_with_params
        port: in

    out[7]:
      - name: values_create
        port: in
    out[8]:
      - name: values_read_or_watch
        port: in
    out[9]:
      - name: values_update
        port: in
    out[10]:
      - name: values_delete_with_query
        port: in

    out[11]:
      - name: values_read_with_params
        port: in
    out[12]:
      - name: values_update_with_params
        port: in
    out[13]:
      - name: values_delete_with_params
        port: in

- kind: if
  name: specs_read_or_watch
  when: '!has(header.Connection) || !has(header.Upgrade)'
  ports:
    out[0]:
      - name: specs_read_with_query
        port: in
    out[1]:
      - name: specs_watch
        port: io

- kind: step
  name: specs_create
  specs:
    - kind: snippet
      language: cel
      code: body
    - kind: syscall
      opcode: specs.create
    - kind: snippet
      language: javascript
      code: |
        export default function (args) {
          return {
            body: args,
            status: 201
          };
        }

- kind: step
  name: specs_read_with_query
  specs:
    - kind: snippet
      language: javascript
      code: |
        export default function ({ query = {} } = {}) {
          return Object.entries(query).flatMap(([key, values]) =>
            values?.map((value) => ({ [key]: value })) || []
          );
        }
    - kind: syscall
      opcode: specs.read
    - kind: snippet
      language: javascript
      code: |
        export default function (args) {
          return {
            body: args,
            status: 200
          };
        }

- kind: step
  name: specs_update
  specs:
    - kind: snippet
      language: cel
      code: body
    - kind: syscall
      opcode: specs.update
    - kind: snippet
      language: javascript
      code: |
        export default function (args) {
          return {
            body: args,
            status: 200
          };
        }

- kind: step
  name: specs_delete_with_query
  specs:
    - kind: snippet
      language: javascript
      code: |
        export default function ({ query = {} } = {}) {
          return Object.entries(query).flatMap(([key, values]) =>
            values?.map((value) => ({ [key]: value })) || []
          );
        }
    - kind: syscall
      opcode: specs.delete
    - kind: snippet
      language: javascript
      code: |
        export default function (args) {
          return {
            status: 204
          };
        }

- kind: step
  name: specs_read_with_params
  specs:
    - kind: snippet
      language: cel
      code: params
    - kind: syscall
      opcode: specs.read
    - kind: snippet
      language: javascript
      code: |
        export default function (args) {
          if (!args) {
            return { 
              body: "Not Found",
              status: 404
            };
          }
          return {
            body: args.length > 1 ? args : args[0],
            status: 200
          };
        }

- kind: step
  name: specs_update_with_params
  specs:
    - kind: snippet
      language: javascript
      code: |
        export default function ({ body, params }) {
          return { ...body, ...params };
        }
    - kind: syscall
      opcode: specs.update
    - kind: snippet
      language: javascript
      code: |
        export default function (args) {
          if (!args) {
            return { 
              body: "Not Found",
              status: 404
            };
          }
          return {
            body: args.length > 1 ? args : args[0],
            status: 200
          };
        }

- kind: step
  name: specs_delete_with_params
  specs:
    - kind: snippet
      language: cel
      code: params
    - kind: syscall
      opcode: specs.delete
    - kind: snippet
      language: javascript
      code: |
        export default function (args) {
          if (!args) {
            return { 
              body: "Not Found",
              status: 404
            };
          }
          return {
            status: 204
          };
        }

- kind: block
  name: specs_watch
  specs:
    - kind: upgrader
      name: websocket
      protocol: websocket

    - kind: signal
      name: signal
      topic: specs
      ports:
        out:
          - name: session
            port: in

    - kind: session
      name: session
      ports:
        out:
          - name: downstream
            port: in

    - kind: snippet
      name: downstream
      language: cel
      code: 'self[1]'
      ports:
        out:
          - name: websocket
            port: in
  inbounds:
    io:
      - name: websocket
        port: io
      - name: session
        port: io

- kind: if
  name: values_read_or_watch
  when: '!has(header.Connection) || !has(header.Upgrade)'
  ports:
    out[0]:
      - name: values_read_with_query
        port: in
    out[1]:
      - name: values_watch
        port: io

- kind: step
  name: values_create
  specs:
    - kind: snippet
      language: cel
      code: body
    - kind: syscall
      opcode: values.create
    - kind: snippet
      language: javascript
      code: |
        export default function (args) {
          return {
            body: args,
            status: 201
          };
        }

- kind: step
  name: values_read_with_query
  specs:
    - kind: snippet
      language: javascript
      code: |
        export default function ({ query = {} } = {}) {
          return Object.entries(query).flatMap(([key, values]) =>
            values?.map((value) => ({ [key]: value })) || []
          );
        }
    - kind: syscall
      opcode: values.read
    - kind: snippet
      language: javascript
      code: |
        export default function (args) {
          return {
            body: args,
            status: 200
          };
        }

- kind: step
  name: values_update
  specs:
    - kind: snippet
      language: cel
      code: body
    - kind: syscall
      opcode: values.update
    - kind: snippet
      language: javascript
      code: |
        export default function (args) {
          return {
            body: args,
            status: 200
          };
        }

- kind: step
  name: values_delete_with_query
  specs:
    - kind: snippet
      language: javascript
      code: |
        export default function ({ query = {} } = {}) {
          return Object.entries(query).flatMap(([key, values]) =>
            values?.map((value) => ({ [key]: value })) || []
          );
        }
    - kind: syscall
      opcode: values.delete
    - kind: snippet
      language: javascript
      code: |
        export default function (args) {
          return {
            status: 204
          };
        }

- kind: step
  name: values_read_with_params
  specs:
    - kind: snippet
      language: cel
      code: params
    - kind: syscall
      opcode: values.read
    - kind: snippet
      language: javascript
      code: |
        export default function (args) {
          if (!args) {
            return { 
              body: "Not Found",
              status: 404
            };
          }
          return {
            body: args.length > 1 ? args : args[0],
            status: 200
          };
        }

- kind: step
  name: values_update_with_params
  specs:
    - kind: snippet
      language: javascript
      code: |
        export default function ({ body, params }) {
          return { ...body, ...params };
        }
    - kind: syscall
      opcode: values.update
    - kind: snippet
      language: javascript
      code: |
        export default function (args) {
          if (!args) {
            return { 
              body: "Not Found",
              status: 404
            };
          }
          return {
            body: args.length > 1 ? args : args[0],
            status: 200
          };
        }

- kind: step
  name: values_delete_with_params
  specs:
    - kind: snippet
      language: javascript
      code: |
        export default function ({ body, params }) {
          return { ...body, ...params };
        }
    - kind: syscall
      opcode: values.delete
    - kind: snippet
      language: javascript
      code: |
        export default function (args) {
          return {
            status: 204
          };
        }

- kind: block
  name: values_watch
  specs:
    - kind: upgrader
      name: websocket
      protocol: websocket

    - kind: signal
      name: signal
      topic: values
      ports:
        out:
          - name: session
            port: in

    - kind: session
      name: session
      ports:
        out:
          - name: downstream
            port: in

    - kind: snippet
      name: downstream
      language: cel
      code: 'self[1]'
      ports:
        out:
          - name: websocket
            port: in
  inbounds:
    io:
      - name: websocket
        port: io
      - name: session
        port: io

- kind: switch
  name: catch
  matches:
    - when: 'self == "unsupported type" || self == "unsupported value"'
      port: out[0]
    - when: 'true'
      port: out[1]
  ports:
    out[0]:
      - name: status_400
        port: in
    out[1]:
      - name: status_500
        port: in

- kind: snippet
  name: status_400
  language: javascript
  code: |
    export default function (args) {
      return {
        body: {
          error: args.error()
        },
        status: 400
      };
    }

- kind: snippet
  name: status_500
  language: json
  code: |
    {
      "body": {
        "error": "Internal Server Error"
      },
      "status": 500
    }

- kind: test
  name: test_specs_create
  ports:
    out:
      - name: mock_specs_create
        port: in

- kind: snippet
  name: mock_specs_create
  language: json
  code: |
    {
      "body": {
        "kind": "nop"
      }
    }
  ports:
    out:
      - name: specs_create
        port: in

- kind: test
  name: test_specs_read_with_query
  ports:
    out:
      - name: mock_specs_read_with_query
        port: in

- kind: snippet
  name: mock_specs_read_with_query
  language: json
  code: |
    {
      "query": {}
    }
  ports:
    out:
      - name: specs_read_with_query
        port: in

- kind: test
  name: test_specs_update
  ports:
    out:
      - name: mock_specs_update
        port: in

- kind: snippet
  name: mock_specs_update
  language: json
  code: |
    {
      "body": {
        "kind": "nop"
      }
    }
  ports:
    out:
      - name: specs_update
        port: in

- kind: test
  name: test_specs_delete_with_query
  ports:
    out:
      - name: mock_specs_delete_with_query
        port: in

- kind: snippet
  name: mock_specs_delete_with_query  
  language: json
  code: |
    {
      "query": {}
    }
  ports:
    out:
      - name: specs_delete_with_query
        port: in

- kind: test
  name: test_specs_read_with_params
  ports:
    out:
      - name: pipe_specs_read_with_params
        port: in

- kind: pipe
  name: pipe_specs_read_with_params
  ports:
    out[0]:
      - name: mock_specs_create
        port: in
    out[1]:
      - name: mock_specs_read_with_params
        port: in

- kind: snippet
  name: mock_specs_read_with_params
  language: javascript
  code: |
    export default function ({ body = {} } = {}) {
      return {
        params: body
      }
    }
  ports:
    out:
      - name: specs_read_with_params
        port: in

- kind: test
  name: test_specs_update_with_params
  ports:
    out:
      - name: pipe_specs_update_with_params
        port: in

- kind: pipe
  name: pipe_specs_update_with_params
  ports:
    out[0]:
      - name: mock_specs_create
        port: in
    out[1]:
      - name: mock_specs_update_with_params
        port: in

- kind: snippet
  name: mock_specs_update_with_params
  language: javascript
  code: |
    export default function ({ body = {} } = {}) {
      return {
        params: body  
      }
    }
  ports:
    out:
      - name: specs_update_with_params
        port: in

- kind: test
  name: test_specs_delete_with_params
  ports:
    out:
      - name: pipe_specs_delete_with_params
        port: in

- kind: pipe
  name: pipe_specs_delete_with_params
  ports:
    out[0]:
      - name: mock_specs_create
        port: in  
    out[1]:
      - name: mock_specs_delete_with_params
        port: in

- kind: snippet
  name: mock_specs_delete_with_params
  language: javascript
  code: |
    export default function ({ body = {} } = {}) {
      return {
        params: body
      }
    }
  ports:
    out:
      - name: specs_delete_with_params
        port: in

- kind: test
  name: test_values_create
  ports:
    out:
      - name: mock_values_create
        port: in

- kind: snippet
  name: mock_values_create
  language: json
  code: |
    {
      "body": {
        "data": "foo"
      }
    }
  ports:
    out:
      - name: values_create
        port: in

- kind: test
  name: test_values_read_with_query
  ports:
    out:
      - name: mock_values_read_with_query
        port: in

- kind: snippet
  name: mock_values_read_with_query
  language: json
  code: |
    {
      "query": {}
    }
  ports:
    out:
      - name: values_read_with_query
        port: in

- kind: test
  name: test_values_update
  ports:
    out:
      - name: mock_values_update
        port: in

- kind: snippet
  name: mock_values_update
  language: json
  code: |
    {
      "body": {
        "data": "foo"
      }
    }
  ports:
    out:
      - name: values_update
        port: in

- kind: test
  name: test_values_delete_with_query
  ports:
    out:
      - name: mock_values_delete_with_query
        port: in

- kind: snippet
  name: mock_values_delete_with_query  
  language: json
  code: |
    {
      "query": {}
    }
  ports:
    out:
      - name: values_delete_with_query
        port: in

- kind: test
  name: test_values_read_with_params
  ports:
    out:
      - name: pipe_values_read_with_params
        port: in

- kind: pipe
  name: pipe_values_read_with_params
  ports:
    out[0]:
      - name: mock_values_create
        port: in
    out[1]:
      - name: mock_values_read_with_params
        port: in

- kind: snippet
  name: mock_values_read_with_params
  language: javascript
  code: |
    export default function ({ body = {} } = {}) {
      return {
        params: body
      }
    }
  ports:
    out:
      - name: values_read_with_params
        port: in

- kind: test
  name: test_values_update_with_params
  ports:
    out:
      - name: pipe_values_update_with_params
        port: in

- kind: pipe
  name: pipe_values_update_with_params
  ports:
    out[0]:
      - name: mock_values_create
        port: in
    out[1]:
      - name: mock_values_update_with_params
        port: in

- kind: snippet
  name: mock_values_update_with_params
  language: javascript
  code: |
    export default function ({ body = {} } = {}) {
      return {
        params: body  
      }
    }
  ports:
    out:
      - name: values_update_with_params
        port: in

- kind: test
  name: test_values_delete_with_params
  ports:
    out:
      - name: pipe_values_delete_with_params
        port: in

- kind: pipe
  name: pipe_values_delete_with_params
  ports:
    out[0]:
      - name: mock_values_create
        port: in  
    out[1]:
      - name: mock_values_delete_with_params
        port: in

- kind: snippet
  name: mock_values_delete_with_params
  language: javascript
  code: |
    export default function ({ body = {} } = {}) {
      return {
        params: body
      }
    }
  ports:
    out:
      - name: values_delete_with_params
        port: in
