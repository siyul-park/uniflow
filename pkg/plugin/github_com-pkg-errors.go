// Code generated by 'yaegi extract github.com/pkg/errors'. DO NOT EDIT.

package plugin

import (
	"github.com/pkg/errors"
	"reflect"
)

func init() {
	Symbols["github.com/pkg/errors/errors"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"As":           reflect.ValueOf(errors.As),
		"Cause":        reflect.ValueOf(errors.Cause),
		"Errorf":       reflect.ValueOf(errors.Errorf),
		"Is":           reflect.ValueOf(errors.Is),
		"New":          reflect.ValueOf(errors.New),
		"Unwrap":       reflect.ValueOf(errors.Unwrap),
		"WithMessage":  reflect.ValueOf(errors.WithMessage),
		"WithMessagef": reflect.ValueOf(errors.WithMessagef),
		"WithStack":    reflect.ValueOf(errors.WithStack),
		"Wrap":         reflect.ValueOf(errors.Wrap),
		"Wrapf":        reflect.ValueOf(errors.Wrapf),

		// type definitions
		"Frame":      reflect.ValueOf((*errors.Frame)(nil)),
		"StackTrace": reflect.ValueOf((*errors.StackTrace)(nil)),
	}
}
