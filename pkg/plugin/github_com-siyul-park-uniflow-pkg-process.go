// Code generated by 'yaegi extract github.com/siyul-park/uniflow/pkg/process'. DO NOT EDIT.

package plugin

import (
	"github.com/siyul-park/uniflow/pkg/process"
	"reflect"
)

func init() {
	Symbols["github.com/siyul-park/uniflow/pkg/process/process"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"ExitFunc":         reflect.ValueOf(process.ExitFunc),
		"New":              reflect.ValueOf(process.New),
		"StatusRunning":    reflect.ValueOf(process.StatusRunning),
		"StatusTerminated": reflect.ValueOf(process.StatusTerminated),

		// type definitions
		"ExitHook":  reflect.ValueOf((*process.ExitHook)(nil)),
		"ExitHooks": reflect.ValueOf((*process.ExitHooks)(nil)),
		"Process":   reflect.ValueOf((*process.Process)(nil)),
		"Status":    reflect.ValueOf((*process.Status)(nil)),

		// interface wrapper definitions
		"_ExitHook": reflect.ValueOf((*_github_com_siyul_park_uniflow_pkg_process_ExitHook)(nil)),
	}
}

// _github_com_siyul_park_uniflow_pkg_process_ExitHook is an interface wrapper for ExitHook type
type _github_com_siyul_park_uniflow_pkg_process_ExitHook struct {
	IValue interface{}
	WExit  func(err error)
}

func (W _github_com_siyul_park_uniflow_pkg_process_ExitHook) Exit(err error) {
	W.WExit(err)
}
