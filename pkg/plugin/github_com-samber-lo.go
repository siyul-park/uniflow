// Code generated by 'yaegi extract github.com/samber/lo'. DO NOT EDIT.

package plugin

import (
	"github.com/samber/lo"
	"reflect"
)

func init() {
	Symbols["github.com/samber/lo/lo"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AllCharset":              reflect.ValueOf(&lo.AllCharset).Elem(),
		"AlphanumericCharset":     reflect.ValueOf(&lo.AlphanumericCharset).Elem(),
		"Async0":                  reflect.ValueOf(lo.Async0),
		"Attempt":                 reflect.ValueOf(lo.Attempt),
		"AttemptWhile":            reflect.ValueOf(lo.AttemptWhile),
		"AttemptWhileWithDelay":   reflect.ValueOf(lo.AttemptWhileWithDelay),
		"AttemptWithDelay":        reflect.ValueOf(lo.AttemptWithDelay),
		"CamelCase":               reflect.ValueOf(lo.CamelCase),
		"Capitalize":              reflect.ValueOf(lo.Capitalize),
		"Duration":                reflect.ValueOf(lo.Duration),
		"Duration0":               reflect.ValueOf(lo.Duration0),
		"Earliest":                reflect.ValueOf(lo.Earliest),
		"Elipse":                  reflect.ValueOf(lo.Elipse),
		"Ellipsis":                reflect.ValueOf(lo.Ellipsis),
		"IsNil":                   reflect.ValueOf(lo.IsNil),
		"IsNotNil":                reflect.ValueOf(lo.IsNotNil),
		"KebabCase":               reflect.ValueOf(lo.KebabCase),
		"Latest":                  reflect.ValueOf(lo.Latest),
		"LettersCharset":          reflect.ValueOf(&lo.LettersCharset).Elem(),
		"LowerCaseLettersCharset": reflect.ValueOf(&lo.LowerCaseLettersCharset).Elem(),
		"Must0":                   reflect.ValueOf(lo.Must0),
		"NewDebounce":             reflect.ValueOf(lo.NewDebounce),
		"NewThrottle":             reflect.ValueOf(lo.NewThrottle),
		"NewThrottleWithCount":    reflect.ValueOf(lo.NewThrottleWithCount),
		"NumbersCharset":          reflect.ValueOf(&lo.NumbersCharset).Elem(),
		"PascalCase":              reflect.ValueOf(lo.PascalCase),
		"RandomString":            reflect.ValueOf(lo.RandomString),
		"Range":                   reflect.ValueOf(lo.Range),
		"RuneLength":              reflect.ValueOf(lo.RuneLength),
		"SnakeCase":               reflect.ValueOf(lo.SnakeCase),
		"SpecialCharset":          reflect.ValueOf(&lo.SpecialCharset).Elem(),
		"Synchronize":             reflect.ValueOf(lo.Synchronize),
		"Try":                     reflect.ValueOf(lo.Try),
		"Try0":                    reflect.ValueOf(lo.Try0),
		"Try1":                    reflect.ValueOf(lo.Try1),
		"TryCatch":                reflect.ValueOf(lo.TryCatch),
		"TryCatchWithErrorValue":  reflect.ValueOf(lo.TryCatchWithErrorValue),
		"TryWithErrorValue":       reflect.ValueOf(lo.TryWithErrorValue),
		"UpperCaseLettersCharset": reflect.ValueOf(&lo.UpperCaseLettersCharset).Elem(),
		"Validate":                reflect.ValueOf(lo.Validate),
		"WaitFor":                 reflect.ValueOf(lo.WaitFor),
		"WaitForWithContext":      reflect.ValueOf(lo.WaitForWithContext),
		"Words":                   reflect.ValueOf(lo.Words),
	}
}
