// Code generated by 'yaegi extract github.com/spf13/afero'. DO NOT EDIT.

package plugin

import (
	"github.com/spf13/afero"
	"io/fs"
	"reflect"
	"time"
)

func init() {
	Symbols["github.com/spf13/afero/afero"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"BADFD":                reflect.ValueOf(afero.BADFD),
		"DirExists":            reflect.ValueOf(afero.DirExists),
		"ErrDestinationExists": reflect.ValueOf(&afero.ErrDestinationExists).Elem(),
		"ErrFileClosed":        reflect.ValueOf(&afero.ErrFileClosed).Elem(),
		"ErrFileExists":        reflect.ValueOf(&afero.ErrFileExists).Elem(),
		"ErrFileNotFound":      reflect.ValueOf(&afero.ErrFileNotFound).Elem(),
		"ErrNoReadlink":        reflect.ValueOf(&afero.ErrNoReadlink).Elem(),
		"ErrNoSymlink":         reflect.ValueOf(&afero.ErrNoSymlink).Elem(),
		"ErrOutOfRange":        reflect.ValueOf(&afero.ErrOutOfRange).Elem(),
		"ErrTooLarge":          reflect.ValueOf(&afero.ErrTooLarge).Elem(),
		"Exists":               reflect.ValueOf(afero.Exists),
		"FileContainsAnyBytes": reflect.ValueOf(afero.FileContainsAnyBytes),
		"FileContainsBytes":    reflect.ValueOf(afero.FileContainsBytes),
		"FilePathSeparator":    reflect.ValueOf(afero.FilePathSeparator),
		"FullBaseFsPath":       reflect.ValueOf(afero.FullBaseFsPath),
		"GetTempDir":           reflect.ValueOf(afero.GetTempDir),
		"Glob":                 reflect.ValueOf(afero.Glob),
		"IsDir":                reflect.ValueOf(afero.IsDir),
		"IsEmpty":              reflect.ValueOf(afero.IsEmpty),
		"NeuterAccents":        reflect.ValueOf(afero.NeuterAccents),
		"NewBasePathFs":        reflect.ValueOf(afero.NewBasePathFs),
		"NewCacheOnReadFs":     reflect.ValueOf(afero.NewCacheOnReadFs),
		"NewCopyOnWriteFs":     reflect.ValueOf(afero.NewCopyOnWriteFs),
		"NewHttpFs":            reflect.ValueOf(afero.NewHttpFs),
		"NewIOFS":              reflect.ValueOf(afero.NewIOFS),
		"NewMemMapFs":          reflect.ValueOf(afero.NewMemMapFs),
		"NewOsFs":              reflect.ValueOf(afero.NewOsFs),
		"NewReadOnlyFs":        reflect.ValueOf(afero.NewReadOnlyFs),
		"NewRegexpFs":          reflect.ValueOf(afero.NewRegexpFs),
		"ReadAll":              reflect.ValueOf(afero.ReadAll),
		"ReadDir":              reflect.ValueOf(afero.ReadDir),
		"ReadFile":             reflect.ValueOf(afero.ReadFile),
		"SafeWriteReader":      reflect.ValueOf(afero.SafeWriteReader),
		"TempDir":              reflect.ValueOf(afero.TempDir),
		"TempFile":             reflect.ValueOf(afero.TempFile),
		"UnicodeSanitize":      reflect.ValueOf(afero.UnicodeSanitize),
		"Walk":                 reflect.ValueOf(afero.Walk),
		"WriteFile":            reflect.ValueOf(afero.WriteFile),
		"WriteReader":          reflect.ValueOf(afero.WriteReader),

		// type definitions
		"Afero":         reflect.ValueOf((*afero.Afero)(nil)),
		"BasePathFile":  reflect.ValueOf((*afero.BasePathFile)(nil)),
		"BasePathFs":    reflect.ValueOf((*afero.BasePathFs)(nil)),
		"CacheOnReadFs": reflect.ValueOf((*afero.CacheOnReadFs)(nil)),
		"CopyOnWriteFs": reflect.ValueOf((*afero.CopyOnWriteFs)(nil)),
		"DirsMerger":    reflect.ValueOf((*afero.DirsMerger)(nil)),
		"File":          reflect.ValueOf((*afero.File)(nil)),
		"FromIOFS":      reflect.ValueOf((*afero.FromIOFS)(nil)),
		"Fs":            reflect.ValueOf((*afero.Fs)(nil)),
		"HttpFs":        reflect.ValueOf((*afero.HttpFs)(nil)),
		"IOFS":          reflect.ValueOf((*afero.IOFS)(nil)),
		"LinkReader":    reflect.ValueOf((*afero.LinkReader)(nil)),
		"Linker":        reflect.ValueOf((*afero.Linker)(nil)),
		"Lstater":       reflect.ValueOf((*afero.Lstater)(nil)),
		"MemMapFs":      reflect.ValueOf((*afero.MemMapFs)(nil)),
		"OsFs":          reflect.ValueOf((*afero.OsFs)(nil)),
		"ReadOnlyFs":    reflect.ValueOf((*afero.ReadOnlyFs)(nil)),
		"RegexpFile":    reflect.ValueOf((*afero.RegexpFile)(nil)),
		"RegexpFs":      reflect.ValueOf((*afero.RegexpFs)(nil)),
		"Symlinker":     reflect.ValueOf((*afero.Symlinker)(nil)),
		"UnionFile":     reflect.ValueOf((*afero.UnionFile)(nil)),

		// interface wrapper definitions
		"_File":       reflect.ValueOf((*_github_com_spf13_afero_File)(nil)),
		"_Fs":         reflect.ValueOf((*_github_com_spf13_afero_Fs)(nil)),
		"_LinkReader": reflect.ValueOf((*_github_com_spf13_afero_LinkReader)(nil)),
		"_Linker":     reflect.ValueOf((*_github_com_spf13_afero_Linker)(nil)),
		"_Lstater":    reflect.ValueOf((*_github_com_spf13_afero_Lstater)(nil)),
		"_Symlinker":  reflect.ValueOf((*_github_com_spf13_afero_Symlinker)(nil)),
	}
}

// _github_com_spf13_afero_File is an interface wrapper for File type
type _github_com_spf13_afero_File struct {
	IValue        interface{}
	WClose        func() error
	WName         func() string
	WRead         func(p []byte) (n int, err error)
	WReadAt       func(p []byte, off int64) (n int, err error)
	WReaddir      func(count int) ([]fs.FileInfo, error)
	WReaddirnames func(n int) ([]string, error)
	WSeek         func(offset int64, whence int) (int64, error)
	WStat         func() (fs.FileInfo, error)
	WSync         func() error
	WTruncate     func(size int64) error
	WWrite        func(p []byte) (n int, err error)
	WWriteAt      func(p []byte, off int64) (n int, err error)
	WWriteString  func(s string) (ret int, err error)
}

func (W _github_com_spf13_afero_File) Close() error {
	return W.WClose()
}
func (W _github_com_spf13_afero_File) Name() string {
	return W.WName()
}
func (W _github_com_spf13_afero_File) Read(p []byte) (n int, err error) {
	return W.WRead(p)
}
func (W _github_com_spf13_afero_File) ReadAt(p []byte, off int64) (n int, err error) {
	return W.WReadAt(p, off)
}
func (W _github_com_spf13_afero_File) Readdir(count int) ([]fs.FileInfo, error) {
	return W.WReaddir(count)
}
func (W _github_com_spf13_afero_File) Readdirnames(n int) ([]string, error) {
	return W.WReaddirnames(n)
}
func (W _github_com_spf13_afero_File) Seek(offset int64, whence int) (int64, error) {
	return W.WSeek(offset, whence)
}
func (W _github_com_spf13_afero_File) Stat() (fs.FileInfo, error) {
	return W.WStat()
}
func (W _github_com_spf13_afero_File) Sync() error {
	return W.WSync()
}
func (W _github_com_spf13_afero_File) Truncate(size int64) error {
	return W.WTruncate(size)
}
func (W _github_com_spf13_afero_File) Write(p []byte) (n int, err error) {
	return W.WWrite(p)
}
func (W _github_com_spf13_afero_File) WriteAt(p []byte, off int64) (n int, err error) {
	return W.WWriteAt(p, off)
}
func (W _github_com_spf13_afero_File) WriteString(s string) (ret int, err error) {
	return W.WWriteString(s)
}

// _github_com_spf13_afero_Fs is an interface wrapper for Fs type
type _github_com_spf13_afero_Fs struct {
	IValue     interface{}
	WChmod     func(name string, mode fs.FileMode) error
	WChown     func(name string, uid int, gid int) error
	WChtimes   func(name string, atime time.Time, mtime time.Time) error
	WCreate    func(name string) (afero.File, error)
	WMkdir     func(name string, perm fs.FileMode) error
	WMkdirAll  func(path string, perm fs.FileMode) error
	WName      func() string
	WOpen      func(name string) (afero.File, error)
	WOpenFile  func(name string, flag int, perm fs.FileMode) (afero.File, error)
	WRemove    func(name string) error
	WRemoveAll func(path string) error
	WRename    func(oldname string, newname string) error
	WStat      func(name string) (fs.FileInfo, error)
}

func (W _github_com_spf13_afero_Fs) Chmod(name string, mode fs.FileMode) error {
	return W.WChmod(name, mode)
}
func (W _github_com_spf13_afero_Fs) Chown(name string, uid int, gid int) error {
	return W.WChown(name, uid, gid)
}
func (W _github_com_spf13_afero_Fs) Chtimes(name string, atime time.Time, mtime time.Time) error {
	return W.WChtimes(name, atime, mtime)
}
func (W _github_com_spf13_afero_Fs) Create(name string) (afero.File, error) {
	return W.WCreate(name)
}
func (W _github_com_spf13_afero_Fs) Mkdir(name string, perm fs.FileMode) error {
	return W.WMkdir(name, perm)
}
func (W _github_com_spf13_afero_Fs) MkdirAll(path string, perm fs.FileMode) error {
	return W.WMkdirAll(path, perm)
}
func (W _github_com_spf13_afero_Fs) Name() string {
	return W.WName()
}
func (W _github_com_spf13_afero_Fs) Open(name string) (afero.File, error) {
	return W.WOpen(name)
}
func (W _github_com_spf13_afero_Fs) OpenFile(name string, flag int, perm fs.FileMode) (afero.File, error) {
	return W.WOpenFile(name, flag, perm)
}
func (W _github_com_spf13_afero_Fs) Remove(name string) error {
	return W.WRemove(name)
}
func (W _github_com_spf13_afero_Fs) RemoveAll(path string) error {
	return W.WRemoveAll(path)
}
func (W _github_com_spf13_afero_Fs) Rename(oldname string, newname string) error {
	return W.WRename(oldname, newname)
}
func (W _github_com_spf13_afero_Fs) Stat(name string) (fs.FileInfo, error) {
	return W.WStat(name)
}

// _github_com_spf13_afero_LinkReader is an interface wrapper for LinkReader type
type _github_com_spf13_afero_LinkReader struct {
	IValue              interface{}
	WReadlinkIfPossible func(name string) (string, error)
}

func (W _github_com_spf13_afero_LinkReader) ReadlinkIfPossible(name string) (string, error) {
	return W.WReadlinkIfPossible(name)
}

// _github_com_spf13_afero_Linker is an interface wrapper for Linker type
type _github_com_spf13_afero_Linker struct {
	IValue             interface{}
	WSymlinkIfPossible func(oldname string, newname string) error
}

func (W _github_com_spf13_afero_Linker) SymlinkIfPossible(oldname string, newname string) error {
	return W.WSymlinkIfPossible(oldname, newname)
}

// _github_com_spf13_afero_Lstater is an interface wrapper for Lstater type
type _github_com_spf13_afero_Lstater struct {
	IValue           interface{}
	WLstatIfPossible func(name string) (fs.FileInfo, bool, error)
}

func (W _github_com_spf13_afero_Lstater) LstatIfPossible(name string) (fs.FileInfo, bool, error) {
	return W.WLstatIfPossible(name)
}

// _github_com_spf13_afero_Symlinker is an interface wrapper for Symlinker type
type _github_com_spf13_afero_Symlinker struct {
	IValue              interface{}
	WLstatIfPossible    func(name string) (fs.FileInfo, bool, error)
	WReadlinkIfPossible func(name string) (string, error)
	WSymlinkIfPossible  func(oldname string, newname string) error
}

func (W _github_com_spf13_afero_Symlinker) LstatIfPossible(name string) (fs.FileInfo, bool, error) {
	return W.WLstatIfPossible(name)
}
func (W _github_com_spf13_afero_Symlinker) ReadlinkIfPossible(name string) (string, error) {
	return W.WReadlinkIfPossible(name)
}
func (W _github_com_spf13_afero_Symlinker) SymlinkIfPossible(oldname string, newname string) error {
	return W.WSymlinkIfPossible(oldname, newname)
}
