// Code generated by 'yaegi extract github.com/siyul-park/uniflow/pkg/types'. DO NOT EDIT.

package plugin

import (
	"github.com/siyul-park/uniflow/pkg/types"
	"reflect"
)

func init() {
	Symbols["github.com/siyul-park/uniflow/pkg/types/types"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Compare":        reflect.ValueOf(types.Compare),
		"Decoder":        reflect.ValueOf(&types.Decoder).Elem(),
		"Encoder":        reflect.ValueOf(&types.Encoder).Elem(),
		"Equal":          reflect.ValueOf(types.Equal),
		"False":          reflect.ValueOf(&types.False).Elem(),
		"HashOf":         reflect.ValueOf(types.HashOf),
		"InterfaceOf":    reflect.ValueOf(types.InterfaceOf),
		"KindBinary":     reflect.ValueOf(types.KindBinary),
		"KindBoolean":    reflect.ValueOf(types.KindBoolean),
		"KindBuffer":     reflect.ValueOf(types.KindBuffer),
		"KindError":      reflect.ValueOf(types.KindError),
		"KindFloat32":    reflect.ValueOf(types.KindFloat32),
		"KindFloat64":    reflect.ValueOf(types.KindFloat64),
		"KindInt":        reflect.ValueOf(types.KindInt),
		"KindInt16":      reflect.ValueOf(types.KindInt16),
		"KindInt32":      reflect.ValueOf(types.KindInt32),
		"KindInt64":      reflect.ValueOf(types.KindInt64),
		"KindInt8":       reflect.ValueOf(types.KindInt8),
		"KindMap":        reflect.ValueOf(types.KindMap),
		"KindOf":         reflect.ValueOf(types.KindOf),
		"KindSlice":      reflect.ValueOf(types.KindSlice),
		"KindString":     reflect.ValueOf(types.KindString),
		"KindUint":       reflect.ValueOf(types.KindUint),
		"KindUint16":     reflect.ValueOf(types.KindUint16),
		"KindUint32":     reflect.ValueOf(types.KindUint32),
		"KindUint64":     reflect.ValueOf(types.KindUint64),
		"KindUint8":      reflect.ValueOf(types.KindUint8),
		"KindUnknown":    reflect.ValueOf(types.KindUnknown),
		"Lookup":         reflect.ValueOf(types.Lookup),
		"Marshal":        reflect.ValueOf(types.Marshal),
		"NewBinary":      reflect.ValueOf(types.NewBinary),
		"NewBoolean":     reflect.ValueOf(types.NewBoolean),
		"NewBuffer":      reflect.ValueOf(types.NewBuffer),
		"NewError":       reflect.ValueOf(types.NewError),
		"NewFloat32":     reflect.ValueOf(types.NewFloat32),
		"NewFloat64":     reflect.ValueOf(types.NewFloat64),
		"NewInt":         reflect.ValueOf(types.NewInt),
		"NewInt16":       reflect.ValueOf(types.NewInt16),
		"NewInt32":       reflect.ValueOf(types.NewInt32),
		"NewInt64":       reflect.ValueOf(types.NewInt64),
		"NewInt8":        reflect.ValueOf(types.NewInt8),
		"NewMap":         reflect.ValueOf(types.NewMap),
		"NewMapWithSize": reflect.ValueOf(types.NewMapWithSize),
		"NewSlice":       reflect.ValueOf(types.NewSlice),
		"NewString":      reflect.ValueOf(types.NewString),
		"NewUint":        reflect.ValueOf(types.NewUint),
		"NewUint16":      reflect.ValueOf(types.NewUint16),
		"NewUint32":      reflect.ValueOf(types.NewUint32),
		"NewUint64":      reflect.ValueOf(types.NewUint64),
		"NewUint8":       reflect.ValueOf(types.NewUint8),
		"True":           reflect.ValueOf(&types.True).Elem(),
		"TypeOf":         reflect.ValueOf(types.TypeOf),
		"Unmarshal":      reflect.ValueOf(types.Unmarshal),

		// type definitions
		"Binary":   reflect.ValueOf((*types.Binary)(nil)),
		"Boolean":  reflect.ValueOf((*types.Boolean)(nil)),
		"Buffer":   reflect.ValueOf((*types.Buffer)(nil)),
		"Error":    reflect.ValueOf((*types.Error)(nil)),
		"Float":    reflect.ValueOf((*types.Float)(nil)),
		"Float32":  reflect.ValueOf((*types.Float32)(nil)),
		"Float64":  reflect.ValueOf((*types.Float64)(nil)),
		"Int":      reflect.ValueOf((*types.Int)(nil)),
		"Int16":    reflect.ValueOf((*types.Int16)(nil)),
		"Int32":    reflect.ValueOf((*types.Int32)(nil)),
		"Int64":    reflect.ValueOf((*types.Int64)(nil)),
		"Int8":     reflect.ValueOf((*types.Int8)(nil)),
		"Integer":  reflect.ValueOf((*types.Integer)(nil)),
		"Kind":     reflect.ValueOf((*types.Kind)(nil)),
		"Map":      reflect.ValueOf((*types.Map)(nil)),
		"Slice":    reflect.ValueOf((*types.Slice)(nil)),
		"String":   reflect.ValueOf((*types.String)(nil)),
		"Uint":     reflect.ValueOf((*types.Uint)(nil)),
		"Uint16":   reflect.ValueOf((*types.Uint16)(nil)),
		"Uint32":   reflect.ValueOf((*types.Uint32)(nil)),
		"Uint64":   reflect.ValueOf((*types.Uint64)(nil)),
		"Uint8":    reflect.ValueOf((*types.Uint8)(nil)),
		"Uinteger": reflect.ValueOf((*types.Uinteger)(nil)),
		"Value":    reflect.ValueOf((*types.Value)(nil)),

		// interface wrapper definitions
		"_Float":    reflect.ValueOf((*_github_com_siyul_park_uniflow_pkg_types_Float)(nil)),
		"_Integer":  reflect.ValueOf((*_github_com_siyul_park_uniflow_pkg_types_Integer)(nil)),
		"_Map":      reflect.ValueOf((*_github_com_siyul_park_uniflow_pkg_types_Map)(nil)),
		"_Uinteger": reflect.ValueOf((*_github_com_siyul_park_uniflow_pkg_types_Uinteger)(nil)),
		"_Value":    reflect.ValueOf((*_github_com_siyul_park_uniflow_pkg_types_Value)(nil)),
	}
}

// _github_com_siyul_park_uniflow_pkg_types_Float is an interface wrapper for Float type
type _github_com_siyul_park_uniflow_pkg_types_Float struct {
	IValue     interface{}
	WCompare   func(other types.Value) int
	WEqual     func(other types.Value) bool
	WFloat     func() float64
	WHash      func() uint64
	WInterface func() any
	WKind      func() types.Kind
}

func (W _github_com_siyul_park_uniflow_pkg_types_Float) Compare(other types.Value) int {
	return W.WCompare(other)
}
func (W _github_com_siyul_park_uniflow_pkg_types_Float) Equal(other types.Value) bool {
	return W.WEqual(other)
}
func (W _github_com_siyul_park_uniflow_pkg_types_Float) Float() float64 {
	return W.WFloat()
}
func (W _github_com_siyul_park_uniflow_pkg_types_Float) Hash() uint64 {
	return W.WHash()
}
func (W _github_com_siyul_park_uniflow_pkg_types_Float) Interface() any {
	return W.WInterface()
}
func (W _github_com_siyul_park_uniflow_pkg_types_Float) Kind() types.Kind {
	return W.WKind()
}

// _github_com_siyul_park_uniflow_pkg_types_Integer is an interface wrapper for Integer type
type _github_com_siyul_park_uniflow_pkg_types_Integer struct {
	IValue     interface{}
	WCompare   func(other types.Value) int
	WEqual     func(other types.Value) bool
	WHash      func() uint64
	WInt       func() int64
	WInterface func() any
	WKind      func() types.Kind
}

func (W _github_com_siyul_park_uniflow_pkg_types_Integer) Compare(other types.Value) int {
	return W.WCompare(other)
}
func (W _github_com_siyul_park_uniflow_pkg_types_Integer) Equal(other types.Value) bool {
	return W.WEqual(other)
}
func (W _github_com_siyul_park_uniflow_pkg_types_Integer) Hash() uint64 {
	return W.WHash()
}
func (W _github_com_siyul_park_uniflow_pkg_types_Integer) Int() int64 {
	return W.WInt()
}
func (W _github_com_siyul_park_uniflow_pkg_types_Integer) Interface() any {
	return W.WInterface()
}
func (W _github_com_siyul_park_uniflow_pkg_types_Integer) Kind() types.Kind {
	return W.WKind()
}

// _github_com_siyul_park_uniflow_pkg_types_Map is an interface wrapper for Map type
type _github_com_siyul_park_uniflow_pkg_types_Map struct {
	IValue         interface{}
	WClear         func() types.Map
	WCompare       func(other types.Value) int
	WDelete        func(key types.Value) types.Map
	WEqual         func(other types.Value) bool
	WGet           func(key types.Value) types.Value
	WHas           func(key types.Value) bool
	WHash          func() uint64
	WImmutable     func() types.Map
	WInterface     func() any
	WKeys          func() []types.Value
	WKind          func() types.Kind
	WLen           func() int
	WMap           func() map[any]any
	WMarshalJSON   func() ([]byte, error)
	WMutable       func() types.Map
	WPairs         func() []types.Value
	WRange         func() func(func(key types.Value, value types.Value) bool)
	WSet           func(key types.Value, val types.Value) types.Map
	WUnmarshalJSON func(a0 []byte) error
	WValues        func() []types.Value
}

func (W _github_com_siyul_park_uniflow_pkg_types_Map) Clear() types.Map {
	return W.WClear()
}
func (W _github_com_siyul_park_uniflow_pkg_types_Map) Compare(other types.Value) int {
	return W.WCompare(other)
}
func (W _github_com_siyul_park_uniflow_pkg_types_Map) Delete(key types.Value) types.Map {
	return W.WDelete(key)
}
func (W _github_com_siyul_park_uniflow_pkg_types_Map) Equal(other types.Value) bool {
	return W.WEqual(other)
}
func (W _github_com_siyul_park_uniflow_pkg_types_Map) Get(key types.Value) types.Value {
	return W.WGet(key)
}
func (W _github_com_siyul_park_uniflow_pkg_types_Map) Has(key types.Value) bool {
	return W.WHas(key)
}
func (W _github_com_siyul_park_uniflow_pkg_types_Map) Hash() uint64 {
	return W.WHash()
}
func (W _github_com_siyul_park_uniflow_pkg_types_Map) Immutable() types.Map {
	return W.WImmutable()
}
func (W _github_com_siyul_park_uniflow_pkg_types_Map) Interface() any {
	return W.WInterface()
}
func (W _github_com_siyul_park_uniflow_pkg_types_Map) Keys() []types.Value {
	return W.WKeys()
}
func (W _github_com_siyul_park_uniflow_pkg_types_Map) Kind() types.Kind {
	return W.WKind()
}
func (W _github_com_siyul_park_uniflow_pkg_types_Map) Len() int {
	return W.WLen()
}
func (W _github_com_siyul_park_uniflow_pkg_types_Map) Map() map[any]any {
	return W.WMap()
}
func (W _github_com_siyul_park_uniflow_pkg_types_Map) MarshalJSON() ([]byte, error) {
	return W.WMarshalJSON()
}
func (W _github_com_siyul_park_uniflow_pkg_types_Map) Mutable() types.Map {
	return W.WMutable()
}
func (W _github_com_siyul_park_uniflow_pkg_types_Map) Pairs() []types.Value {
	return W.WPairs()
}
func (W _github_com_siyul_park_uniflow_pkg_types_Map) Range() func(func(key types.Value, value types.Value) bool) {
	return W.WRange()
}
func (W _github_com_siyul_park_uniflow_pkg_types_Map) Set(key types.Value, val types.Value) types.Map {
	return W.WSet(key, val)
}
func (W _github_com_siyul_park_uniflow_pkg_types_Map) UnmarshalJSON(a0 []byte) error {
	return W.WUnmarshalJSON(a0)
}
func (W _github_com_siyul_park_uniflow_pkg_types_Map) Values() []types.Value {
	return W.WValues()
}

// _github_com_siyul_park_uniflow_pkg_types_Uinteger is an interface wrapper for Uinteger type
type _github_com_siyul_park_uniflow_pkg_types_Uinteger struct {
	IValue     interface{}
	WCompare   func(other types.Value) int
	WEqual     func(other types.Value) bool
	WHash      func() uint64
	WInterface func() any
	WKind      func() types.Kind
	WUint      func() uint64
}

func (W _github_com_siyul_park_uniflow_pkg_types_Uinteger) Compare(other types.Value) int {
	return W.WCompare(other)
}
func (W _github_com_siyul_park_uniflow_pkg_types_Uinteger) Equal(other types.Value) bool {
	return W.WEqual(other)
}
func (W _github_com_siyul_park_uniflow_pkg_types_Uinteger) Hash() uint64 {
	return W.WHash()
}
func (W _github_com_siyul_park_uniflow_pkg_types_Uinteger) Interface() any {
	return W.WInterface()
}
func (W _github_com_siyul_park_uniflow_pkg_types_Uinteger) Kind() types.Kind {
	return W.WKind()
}
func (W _github_com_siyul_park_uniflow_pkg_types_Uinteger) Uint() uint64 {
	return W.WUint()
}

// _github_com_siyul_park_uniflow_pkg_types_Value is an interface wrapper for Value type
type _github_com_siyul_park_uniflow_pkg_types_Value struct {
	IValue     interface{}
	WCompare   func(other types.Value) int
	WEqual     func(other types.Value) bool
	WHash      func() uint64
	WInterface func() any
	WKind      func() types.Kind
}

func (W _github_com_siyul_park_uniflow_pkg_types_Value) Compare(other types.Value) int {
	return W.WCompare(other)
}
func (W _github_com_siyul_park_uniflow_pkg_types_Value) Equal(other types.Value) bool {
	return W.WEqual(other)
}
func (W _github_com_siyul_park_uniflow_pkg_types_Value) Hash() uint64 {
	return W.WHash()
}
func (W _github_com_siyul_park_uniflow_pkg_types_Value) Interface() any {
	return W.WInterface()
}
func (W _github_com_siyul_park_uniflow_pkg_types_Value) Kind() types.Kind {
	return W.WKind()
}
