// Code generated by 'yaegi extract github.com/siyul-park/uniflow/pkg/spec'. DO NOT EDIT.

package plugin

import (
	"github.com/gofrs/uuid"
	"github.com/siyul-park/uniflow/pkg/spec"
	"go/constant"
	"go/token"
	"reflect"
)

func init() {
	Symbols["github.com/siyul-park/uniflow/pkg/spec/spec"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"As":             reflect.ValueOf(spec.As),
		"KeyAnnotations": reflect.ValueOf(constant.MakeFromLiteral("\"annotations\"", token.STRING, 0)),
		"KeyEnv":         reflect.ValueOf(constant.MakeFromLiteral("\"env\"", token.STRING, 0)),
		"KeyID":          reflect.ValueOf(constant.MakeFromLiteral("\"id\"", token.STRING, 0)),
		"KeyKind":        reflect.ValueOf(constant.MakeFromLiteral("\"kind\"", token.STRING, 0)),
		"KeyName":        reflect.ValueOf(constant.MakeFromLiteral("\"name\"", token.STRING, 0)),
		"KeyNamespace":   reflect.ValueOf(constant.MakeFromLiteral("\"namespace\"", token.STRING, 0)),
		"KeyPorts":       reflect.ValueOf(constant.MakeFromLiteral("\"ports\"", token.STRING, 0)),
		"New":            reflect.ValueOf(spec.New),

		// type definitions
		"Meta":         reflect.ValueOf((*spec.Meta)(nil)),
		"Port":         reflect.ValueOf((*spec.Port)(nil)),
		"Spec":         reflect.ValueOf((*spec.Spec)(nil)),
		"Unstructured": reflect.ValueOf((*spec.Unstructured)(nil)),
		"Value":        reflect.ValueOf((*spec.Value)(nil)),

		// interface wrapper definitions
		"_Spec": reflect.ValueOf((*_github_com_siyul_park_uniflow_pkg_spec_Spec)(nil)),
	}
}

// _github_com_siyul_park_uniflow_pkg_spec_Spec is an interface wrapper for Spec type
type _github_com_siyul_park_uniflow_pkg_spec_Spec struct {
	IValue          interface{}
	WGetAnnotations func() map[string]string
	WGetEnv         func() map[string]spec.Value
	WGetID          func() uuid.UUID
	WGetKind        func() string
	WGetName        func() string
	WGetNamespace   func() string
	WGetPorts       func() map[string][]spec.Port
	WSetAnnotations func(val map[string]string)
	WSetEnv         func(val map[string]spec.Value)
	WSetID          func(val uuid.UUID)
	WSetKind        func(val string)
	WSetName        func(val string)
	WSetNamespace   func(val string)
	WSetPorts       func(val map[string][]spec.Port)
}

func (W _github_com_siyul_park_uniflow_pkg_spec_Spec) GetAnnotations() map[string]string {
	return W.WGetAnnotations()
}
func (W _github_com_siyul_park_uniflow_pkg_spec_Spec) GetEnv() map[string]spec.Value {
	return W.WGetEnv()
}
func (W _github_com_siyul_park_uniflow_pkg_spec_Spec) GetID() uuid.UUID {
	return W.WGetID()
}
func (W _github_com_siyul_park_uniflow_pkg_spec_Spec) GetKind() string {
	return W.WGetKind()
}
func (W _github_com_siyul_park_uniflow_pkg_spec_Spec) GetName() string {
	return W.WGetName()
}
func (W _github_com_siyul_park_uniflow_pkg_spec_Spec) GetNamespace() string {
	return W.WGetNamespace()
}
func (W _github_com_siyul_park_uniflow_pkg_spec_Spec) GetPorts() map[string][]spec.Port {
	return W.WGetPorts()
}
func (W _github_com_siyul_park_uniflow_pkg_spec_Spec) SetAnnotations(val map[string]string) {
	W.WSetAnnotations(val)
}
func (W _github_com_siyul_park_uniflow_pkg_spec_Spec) SetEnv(val map[string]spec.Value) {
	W.WSetEnv(val)
}
func (W _github_com_siyul_park_uniflow_pkg_spec_Spec) SetID(val uuid.UUID) {
	W.WSetID(val)
}
func (W _github_com_siyul_park_uniflow_pkg_spec_Spec) SetKind(val string) {
	W.WSetKind(val)
}
func (W _github_com_siyul_park_uniflow_pkg_spec_Spec) SetName(val string) {
	W.WSetName(val)
}
func (W _github_com_siyul_park_uniflow_pkg_spec_Spec) SetNamespace(val string) {
	W.WSetNamespace(val)
}
func (W _github_com_siyul_park_uniflow_pkg_spec_Spec) SetPorts(val map[string][]spec.Port) {
	W.WSetPorts(val)
}
