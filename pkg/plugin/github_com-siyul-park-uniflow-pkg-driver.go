// Code generated by 'yaegi extract github.com/siyul-park/uniflow/pkg/driver'. DO NOT EDIT.

package plugin

import (
	"context"
	"github.com/siyul-park/uniflow/pkg/driver"
	"reflect"
)

func init() {
	Symbols["github.com/siyul-park/uniflow/pkg/driver/driver"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"ErrAlreadyRegistered":    reflect.ValueOf(&driver.ErrAlreadyRegistered).Elem(),
		"ErrKeyDuplicate":         reflect.ValueOf(&driver.ErrKeyDuplicate).Elem(),
		"ErrKeyMissing":           reflect.ValueOf(&driver.ErrKeyMissing).Elem(),
		"ErrKeyNotFound":          reflect.ValueOf(&driver.ErrKeyNotFound).Elem(),
		"ErrNotRegistered":        reflect.ValueOf(&driver.ErrNotRegistered).Elem(),
		"ErrUnsupportedOperation": reflect.ValueOf(&driver.ErrUnsupportedOperation).Elem(),
		"ErrUnsupportedType":      reflect.ValueOf(&driver.ErrUnsupportedType).Elem(),
		"New":                     reflect.ValueOf(driver.New),
		"NewConnAlias":            reflect.ValueOf(driver.NewConnAlias),
		"NewConnProxy":            reflect.ValueOf(driver.NewConnProxy),
		"NewProxy":                reflect.ValueOf(driver.NewProxy),
		"NewRegistry":             reflect.ValueOf(driver.NewRegistry),
		"NewStore":                reflect.ValueOf(driver.NewStore),

		// type definitions
		"Conn":          reflect.ValueOf((*driver.Conn)(nil)),
		"ConnAlias":     reflect.ValueOf((*driver.ConnAlias)(nil)),
		"ConnProxy":     reflect.ValueOf((*driver.ConnProxy)(nil)),
		"Cursor":        reflect.ValueOf((*driver.Cursor)(nil)),
		"DeleteOptions": reflect.ValueOf((*driver.DeleteOptions)(nil)),
		"Driver":        reflect.ValueOf((*driver.Driver)(nil)),
		"Event":         reflect.ValueOf((*driver.Event)(nil)),
		"FindOptions":   reflect.ValueOf((*driver.FindOptions)(nil)),
		"IndexOptions":  reflect.ValueOf((*driver.IndexOptions)(nil)),
		"InsertOptions": reflect.ValueOf((*driver.InsertOptions)(nil)),
		"Proxy":         reflect.ValueOf((*driver.Proxy)(nil)),
		"Registry":      reflect.ValueOf((*driver.Registry)(nil)),
		"Store":         reflect.ValueOf((*driver.Store)(nil)),
		"Stream":        reflect.ValueOf((*driver.Stream)(nil)),
		"UpdateOptions": reflect.ValueOf((*driver.UpdateOptions)(nil)),

		// interface wrapper definitions
		"_Conn":   reflect.ValueOf((*_github_com_siyul_park_uniflow_pkg_driver_Conn)(nil)),
		"_Cursor": reflect.ValueOf((*_github_com_siyul_park_uniflow_pkg_driver_Cursor)(nil)),
		"_Driver": reflect.ValueOf((*_github_com_siyul_park_uniflow_pkg_driver_Driver)(nil)),
		"_Store":  reflect.ValueOf((*_github_com_siyul_park_uniflow_pkg_driver_Store)(nil)),
		"_Stream": reflect.ValueOf((*_github_com_siyul_park_uniflow_pkg_driver_Stream)(nil)),
	}
}

// _github_com_siyul_park_uniflow_pkg_driver_Conn is an interface wrapper for Conn type
type _github_com_siyul_park_uniflow_pkg_driver_Conn struct {
	IValue interface{}
	WClose func() error
	WLoad  func(name string) (driver.Store, error)
}

func (W _github_com_siyul_park_uniflow_pkg_driver_Conn) Close() error {
	return W.WClose()
}
func (W _github_com_siyul_park_uniflow_pkg_driver_Conn) Load(name string) (driver.Store, error) {
	return W.WLoad(name)
}

// _github_com_siyul_park_uniflow_pkg_driver_Cursor is an interface wrapper for Cursor type
type _github_com_siyul_park_uniflow_pkg_driver_Cursor struct {
	IValue  interface{}
	WAll    func(ctx context.Context, val any) error
	WClose  func(ctx context.Context) error
	WDecode func(val any) error
	WNext   func(ctx context.Context) bool
}

func (W _github_com_siyul_park_uniflow_pkg_driver_Cursor) All(ctx context.Context, val any) error {
	return W.WAll(ctx, val)
}
func (W _github_com_siyul_park_uniflow_pkg_driver_Cursor) Close(ctx context.Context) error {
	return W.WClose(ctx)
}
func (W _github_com_siyul_park_uniflow_pkg_driver_Cursor) Decode(val any) error {
	return W.WDecode(val)
}
func (W _github_com_siyul_park_uniflow_pkg_driver_Cursor) Next(ctx context.Context) bool {
	return W.WNext(ctx)
}

// _github_com_siyul_park_uniflow_pkg_driver_Driver is an interface wrapper for Driver type
type _github_com_siyul_park_uniflow_pkg_driver_Driver struct {
	IValue interface{}
	WClose func() error
	WOpen  func(name string) (driver.Conn, error)
}

func (W _github_com_siyul_park_uniflow_pkg_driver_Driver) Close() error {
	return W.WClose()
}
func (W _github_com_siyul_park_uniflow_pkg_driver_Driver) Open(name string) (driver.Conn, error) {
	return W.WOpen(name)
}

// _github_com_siyul_park_uniflow_pkg_driver_Store is an interface wrapper for Store type
type _github_com_siyul_park_uniflow_pkg_driver_Store struct {
	IValue   interface{}
	WDelete  func(ctx context.Context, filter any, opts ...driver.DeleteOptions) (int, error)
	WFind    func(ctx context.Context, filter any, opts ...driver.FindOptions) (driver.Cursor, error)
	WIndex   func(ctx context.Context, keys []string, opts ...driver.IndexOptions) error
	WInsert  func(ctx context.Context, docs []any, opts ...driver.InsertOptions) error
	WUnindex func(ctx context.Context, keys []string) error
	WUpdate  func(ctx context.Context, filter any, update any, opts ...driver.UpdateOptions) (int, error)
	WWatch   func(ctx context.Context, filter any) (driver.Stream, error)
}

func (W _github_com_siyul_park_uniflow_pkg_driver_Store) Delete(ctx context.Context, filter any, opts ...driver.DeleteOptions) (int, error) {
	return W.WDelete(ctx, filter, opts...)
}
func (W _github_com_siyul_park_uniflow_pkg_driver_Store) Find(ctx context.Context, filter any, opts ...driver.FindOptions) (driver.Cursor, error) {
	return W.WFind(ctx, filter, opts...)
}
func (W _github_com_siyul_park_uniflow_pkg_driver_Store) Index(ctx context.Context, keys []string, opts ...driver.IndexOptions) error {
	return W.WIndex(ctx, keys, opts...)
}
func (W _github_com_siyul_park_uniflow_pkg_driver_Store) Insert(ctx context.Context, docs []any, opts ...driver.InsertOptions) error {
	return W.WInsert(ctx, docs, opts...)
}
func (W _github_com_siyul_park_uniflow_pkg_driver_Store) Unindex(ctx context.Context, keys []string) error {
	return W.WUnindex(ctx, keys)
}
func (W _github_com_siyul_park_uniflow_pkg_driver_Store) Update(ctx context.Context, filter any, update any, opts ...driver.UpdateOptions) (int, error) {
	return W.WUpdate(ctx, filter, update, opts...)
}
func (W _github_com_siyul_park_uniflow_pkg_driver_Store) Watch(ctx context.Context, filter any) (driver.Stream, error) {
	return W.WWatch(ctx, filter)
}

// _github_com_siyul_park_uniflow_pkg_driver_Stream is an interface wrapper for Stream type
type _github_com_siyul_park_uniflow_pkg_driver_Stream struct {
	IValue  interface{}
	WClose  func(ctx context.Context) error
	WDecode func(val any) error
	WNext   func(ctx context.Context) bool
}

func (W _github_com_siyul_park_uniflow_pkg_driver_Stream) Close(ctx context.Context) error {
	return W.WClose(ctx)
}
func (W _github_com_siyul_park_uniflow_pkg_driver_Stream) Decode(val any) error {
	return W.WDecode(val)
}
func (W _github_com_siyul_park_uniflow_pkg_driver_Stream) Next(ctx context.Context) bool {
	return W.WNext(ctx)
}
